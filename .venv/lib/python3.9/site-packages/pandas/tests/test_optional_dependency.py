import sys
import types



import pytest

from _pytest.monkeypatch import MonkeyPatch
from pandas.compat._optional import (
    VERSIONS,
    import_optional_dependency,
)

import pandas._testing as tm


def test_import_optional():
    match = "Missing .*notapackage.* pip .* conda .* notapackage"
    with pytest.raises(ImportError, match=match) as exc_info:
        import_optional_dependency("notapackage")
    # The original exception should be there as context:
    if not isinstance(exc_info.value.__context__, ImportError):
        raise AssertionError("Expected context to be an ImportError")

    result = import_optional_dependency("notapackage", errors="ignore")
    if result is not None:
        raise AssertionError("Expected result to be None")


def test_xlrd_version_fallback():
    pytest.importorskip("xlrd")
    import_optional_dependency("xlrd")


def test_bad_version(monkeypatch: MonkeyPatch):
    name = "fakemodule"
    module = types.ModuleType(name)
    module.__version__ = "0.9.0"
    sys.modules[name] = module
    monkeypatch.setitem(VERSIONS, name, "1.0.0")

    try:
        match = "Pandas requires .*1.0.0.* of .fakemodule.*'0.9.0'"
        with pytest.raises(ImportError, match=match):
            import_optional_dependency("fakemodule")

        # Test min_version parameter
        result = import_optional_dependency("fakemodule", min_version="0.8")
        if result is not module:
            raise AssertionError("Expected result to be the module")

        with tm.assert_produces_warning(UserWarning):
            result = import_optional_dependency("fakemodule", errors="warn")
        if result is not None:
            raise AssertionError("Expected result to be None")

        module.__version__ = "1.0.0"  # exact match is OK
        result = import_optional_dependency("fakemodule")
        if result is not module:
            raise AssertionError("Expected result to be the module")

        with pytest.raises(ImportError, match="Pandas requires version '1.1.0'"):
            import_optional_dependency("fakemodule", min_version="1.1.0")

        with tm.assert_produces_warning(UserWarning):
            result = import_optional_dependency(
                "fakemodule", errors="warn", min_version="1.1.0"
            )
        if result is not None:
            raise AssertionError("Expected result to be None")

        result = import_optional_dependency(
            "fakemodule", errors="ignore", min_version="1.1.0"
        )
        if result is not None:
            raise AssertionError("Expected result to be None")
    finally:
        del sys.modules[name]
        monkeypatch.delitem(VERSIONS, name)


def test_submodule(monkeypatch: MonkeyPatch):
    # Create a fake module with a submodule
    name = "fakemodule"
    module = types.ModuleType(name)
    module.__version__ = "0.9.0"
    sys.modules[name] = module
    sub_name = "submodule"
    submodule = types.ModuleType(sub_name)
    setattr(module, sub_name, submodule)
    sys.modules[f"{name}.{sub_name}"] = submodule
    monkeypatch.setitem(VERSIONS, name, "1.0.0")

    match = "Pandas requires .*1.0.0.* of .fakemodule.*'0.9.0'"
    with pytest.raises(ImportError, match=match):
        import_optional_dependency("fakemodule.submodule")

    with tm.assert_produces_warning(UserWarning):
        result = import_optional_dependency("fakemodule.submodule", errors="warn")
    if result is not None:
        raise AssertionError("Expected result to be None")

    module.__version__ = "1.0.0"  # exact match is OK
    result = import_optional_dependency("fakemodule.submodule")
    if result is not submodule:
        raise AssertionError("Expected result to be the submodule")


def test_no_version_raises(monkeypatch: MonkeyPatch):
    name = "fakemodule"
    module = types.ModuleType(name)
    sys.modules[name] = module
    monkeypatch.setitem(VERSIONS, name, "1.0.0")

    with pytest.raises(ImportError, match="Can't determine .* fakemodule"):
        import_optional_dependency(name)
